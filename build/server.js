// Generated by CoffeeScript 2.6.1
(function() {
  // ---------------------------------------------------------------------------------------
  // Modules
  var Database, authGet, authMiddleware, cookieParser, database, express, fatalError, findFlatIssues, fs, https, main, oauthGet, processOAuth, progressGet, progressPost, progressRespond, secrets;

  cookieParser = require('cookie-parser');

  Database = require('./Database');

  express = require('express');

  fs = require('fs');

  https = require('https');

  // ---------------------------------------------------------------------------------------
  // Globals
  secrets = null;

  database = null;

  // ---------------------------------------------------------------------------------------
  // Helpers
  fatalError = function(reason) {
    console.error(`FATAL: ${reason}`);
    return process.exit(1);
  };

  findFlatIssues = function(manifest, dirPrefix) {
    var i, issue, issues, len, ref;
    issues = [];
    ref = manifest.flat;
    for (i = 0, len = ref.length; i < len; i++) {
      issue = ref[i];
      if (issue.dir.indexOf(dirPrefix) === 0) {
        issues.push(issue);
      }
    }
    return issues;
  };

  // ---------------------------------------------------------------------------------------
  // Authentication
  processOAuth = function(code) {
    console.log(`processOAuth: ${code}`);
    return new Promise(function(resolve, reject) {
      var options, params, postdata, req;
      if ((code == null) || (code.length < 1)) {
        resolve('');
        return;
      }
      postdata = {
        client_id: secrets.discordClientID,
        client_secret: secrets.discordClientSecret,
        grant_type: 'authorization_code',
        redirect_uri: secrets.url + '/oauth',
        code: code,
        scope: 'identify'
      };
      params = String(new URLSearchParams(postdata));
      options = {
        hostname: 'discord.com',
        port: 443,
        path: '/api/oauth2/token',
        method: 'POST',
        headers: {
          'Content-Length': params.length,
          'Content-Type': 'application/x-www-form-urlencoded'
        }
      };
      req = https.request(options, function(res) {
        var rawJSON;
        rawJSON = "";
        res.on('data', function(chunk) {
          return rawJSON += chunk;
        });
        res.on('error', function() {
          console.log("Error getting auth");
          return resolve('');
        });
        return res.on('end', function() {
          var data, meOptions, meReq;
          data = null;
          try {
            data = JSON.parse(rawJSON);
          } catch (error) {
            console.log(`ERROR: Failed to talk to parse JSON: ${rawJSON}`);
            resolve('');
            return;
          }
          // console.log "Discord replied: ", JSON.stringify(data, null, 2)
          if ((data.access_token == null) || (data.access_token.length < 1) || (data.token_type == null) || (data.token_type.length < 1)) {
            console.log("bad oauth reply (no access_token or token_type):", data);
            resolve('');
            return;
          }
          meOptions = {
            hostname: 'discord.com',
            port: 443,
            path: '/api/users/@me',
            headers: {
              'Authorization': `${data.token_type} ${data.access_token}`
            }
          };
          // console.log "meOptions:", meOptions
          meReq = https.request(meOptions, function(meRes) {
            var meRawJSON;
            meRawJSON = "";
            meRes.on('data', function(chunk) {
              return meRawJSON += chunk;
            });
            meRes.on('error', function() {
              console.log("Error getting auth");
              return resolve('');
            });
            return meRes.on('end', function() {
              var auth, meData, tag;
              meData = null;
              try {
                meData = JSON.parse(meRawJSON);
              } catch (error) {
                console.log(`ERROR: Failed to talk to parse JSON: ${meRawJSON}`);
                resolve('');
                return;
              }
              // console.log "Me replied:", meData
              if ((meData != null) && (meData.username != null) && (meData.discriminator != null)) {
                tag = `${meData.username}#${meData.discriminator}`;
                if ((secrets.allowed != null) && !secrets.allowed[tag]) {
                  console.log(`ERROR: Discord user '${tag}' is not in secrets.allowed, bailing`);
                  return resolve('');
                } else {
                  auth = database.newAuth(tag);
                  return resolve(auth.token);
                }
              } else {
                console.log("ERROR: Giving up on new token, couldn't get username and discriminator:", meData);
                return resolve('');
              }
            });
          });
          return meReq.end();
        });
      });
      req.write(params);
      req.end();
      return console.log("sending request:", postdata);
    });
  };

  oauthGet = function(req, res) {
    console.log("OAuth! ", req.query);
    if ((req.query != null) && (req.query.code != null)) {
      return processOAuth(req.query.code).then(function(token) {
        if ((token != null) && (token.length > 0)) {
          res.cookie('token', token, {
            maxAge: 1000 * 3600 * 24 * 30,
            httpOnly: true
          });
          return res.redirect("/");
        } else {
          return res.redirect('/auth');
        }
      });
    } else {
      return res.redirect('/auth');
    }
  };

  authMiddleware = function(req, res, next) {
    req.discordAuth = database.getAuth(req.cookies.token);
    if ((req.path === '/auth') || (req.path === '/oauth')) {
      next();
      return;
    }
    if (req.discordAuth == null) {
      res.redirect('/auth');
      return;
    }
    return next();
  };

  authGet = function(req, res) {
    var html, loginLink, redirectURL;
    if ((req.query != null) && (req.query.logout != null)) {
      database.clearAuth(req.cookies.token);
      res.clearCookie('token');
      res.redirect('/auth');
      return;
    }
    html = `<html>
<head>
<title>Comics Authentication</title>
</head>
<style>
body {
  color: #ffffff;
  background-color: #111111;
  margin-top: 50px;
  text-align: center;
}
.hello {
  margin-bottom: 20px;
}
a {
  text-decoration: none;
  color: #aaffaa;
}
</style>
<body>
`;
    if (req.discordAuth != null) {
      html += `<div class="hello">Hello, <span class="username">${req.discordAuth.tag}!</span></div>
<div class="actions">[ <a href=\"/\">Browse Comics</a> ] [ <a href="/auth?logout">Logout</a> ]</div>`;
    } else {
      redirectURL = `${secrets.url}/oauth`;
      loginLink = `https://discord.com/api/oauth2/authorize?client_id=${secrets.discordClientID}&redirect_uri=${encodeURIComponent(redirectURL)}&response_type=code&scope=identify`;
      html += `<div class="hello">In order to browse and rate comics (and remember your place in them), you must authenticate via Discord.</span></div>
<div class="actions">
  [ <a href=\"${loginLink}\">Login via Discord</a> ]
</div>`;
    }
    html += `
</body>
</html>`;
    return res.send(html);
  };

  // ---------------------------------------------------------------------------------------
  // Crackers Read
  progressRespond = function(manifest, req, res) {
    var d, dbProgress, dir, e, i, ignore, issue, issues, j, len, len1, list, progress, ratingCount, ratingSum, readPages, ref, totalPages;
    progress = {
      children: manifest.children,
      page: {}
    };
    dbProgress = database.getProgress(req.discordAuth);
    ref = progress.children;
    for (dir in ref) {
      list = ref[dir];
      for (i = 0, len = list.length; i < len; i++) {
        e = list[i];
        e.rating = 0;
        if (dbProgress.rating[e.dir] != null) {
          e.rating = dbProgress.rating[e.dir];
        }
        if (e.type === 'comic') {
          e.page = 0;
          e.perc = 0;
          if ((e.pages > 0) && (dbProgress.page[e.dir] != null)) {
            e.page = dbProgress.page[e.dir];
            e.perc = Math.min(100, Math.floor(100 * e.page / e.pages));
            if (e.page === 1) {
              // On Deck
              e.perc = 1;
            } else if (e.perc === 1) {
              // Not on deck, lie about percentage
              e.perc = 2;
            }
          }
          progress.page[e.dir] = e.page; // e.type == 'dir'
        } else {
          e.perc = 0;
          e.rating = 0;
          readPages = 0;
          totalPages = 0;
          ratingSum = 0;
          ratingCount = 0;
          issues = manifest.issues[e.dir];
          for (j = 0, len1 = issues.length; j < len1; j++) {
            issue = issues[j];
            totalPages += issue.pages;
            if (dbProgress.page[issue.dir] != null) {
              readPages += dbProgress.page[issue.dir];
            }
            if (dbProgress.rating[issue.dir] != null) {
              ratingSum += dbProgress.rating[issue.dir];
              ratingCount += 1;
            }
          }
          if (ratingCount > 0) {
            e.rating = ratingSum / ratingCount;
          }
          if (totalPages > 0) {
            e.perc = Math.min(100, 100 * readPages / totalPages);
            if (readPages > 0) {
              // Don't allow a 0% on something you've read at least one page on
              e.perc = Math.max(1, e.perc);
            }
            if (readPages !== totalPages) {
              // Don't allow a 100% on something you haven't completely read.
              e.perc = Math.min(99, e.perc);
            }
            if (readPages === 1) {
              // On deck
              e.perc = 1;
            } else if (e.perc === 1) {
              // Not on deck, lie about percentage
              e.perc = 2;
            }
          }
        }
// Check ignored
        for (ignore in dbProgress.ignore) {
          d = e.dir;
          if (!d.match(/\/$/)) {
            d += "/";
          }
          if (d.indexOf(ignore) === 0) {
            e.perc = -1;
            break;
          }
        }
      }
    }
    res.contentType("progress.json");
    return res.send(progress);
  };

  progressGet = function(req, res) {
    var manifest;
    manifest = JSON.parse(fs.readFileSync(`${__dirname}/../root/server.crackers`, "utf8"));
    return progressRespond(manifest, req, res);
  };

  progressPost = function(req, res) {
    var dir, i, issue, issues, j, len, len1, manifest, markRead;
    // console.log "progressPost: #{JSON.stringify(req.body)}"
    manifest = JSON.parse(fs.readFileSync(`${__dirname}/../root/server.crackers`, "utf8"));
    if (req.body != null) {
      if (req.body.ignore != null) {
        database.toggleIgnore(req.discordAuth, req.body.ignore);
      } else if ((req.body.dir != null) && (req.body.rating != null)) {
        issues = findFlatIssues(manifest, req.body.dir);
        for (i = 0, len = issues.length; i < len; i++) {
          issue = issues[i];
          database.setRating(req.discordAuth, issue.dir, req.body.rating);
        }
      } else if ((req.body.mark != null) || (req.body.unmark != null)) {
        dir = req.body.mark;
        markRead = true;
        if (req.body.unmark != null) {
          dir = req.body.unmark;
          markRead = false;
        }
        issues = findFlatIssues(manifest, dir);
        for (j = 0, len1 = issues.length; j < len1; j++) {
          issue = issues[j];
          if (markRead) {
            database.setPage(req.discordAuth, issue.dir, issue.pages);
          } else {
            database.setPage(req.discordAuth, issue.dir, 0);
          }
        }
      } else if ((req.body.dir != null) && (req.body.page != null)) {
        database.setPage(req.discordAuth, req.body.dir, req.body.page);
      }
    }
    return progressRespond(manifest, req, res);
  };

  // ---------------------------------------------------------------------------------------
  main = function(argv) {
    var app, host, http;
    secrets = JSON.parse(fs.readFileSync('secrets.json', 'utf8'));
    console.log("Secrets:");
    console.log(JSON.stringify(secrets, null, 2));
    if (!secrets.discordClientID || !secrets.discordClientSecret) {
      fatalError("Discord secrets missing!");
    }
    database = new Database();
    if (!database.load()) {
      fatalError("Failed to init database!");
    }
    app = express();
    http = require('http').createServer(app);
    app.use(cookieParser());
    app.use(authMiddleware);
    app.use(express.json());
    app.get('/auth', authGet);
    app.get('/oauth', oauthGet);
    app.get('/progress', progressGet);
    app.post('/progress', progressPost);
    app.use(express.static('root'));
    host = '127.0.0.1';
    if (argv.length > 0) {
      host = '0.0.0.0';
    }
    return http.listen(3003, host, function() {
      return console.log(`listening on ${host}:3003`);
    });
  };

  module.exports = main;

}).call(this);
